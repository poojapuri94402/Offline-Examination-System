/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Adminui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import model.dao.TestQuestionDao;
import model.to.TestQuestionTo;

/**
 *
 * @author POOJA PURI
 */
public class ViewTestQuestion extends javax.swing.JInternalFrame {

    /**
     * Creates new form ViewTestQuestion
     */
    private JPopupMenu popupmenu;
    private int row;
    List<TestQuestionTo> questions;

    public ViewTestQuestion() {
        initComponents();
        bindtableTestQuestionInfo();
        row = -1;
        popupmenu = new JPopupMenu();
        JMenuItem jmiDelete = new JMenuItem("Delete This Record");
        JMenuItem jmiEdit = new JMenuItem("Edit This Record");
        jmiDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteRecord();
            }
        });
        popupmenu.add(jmiDelete);
        jmiEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editrecord();
            }
        });

        popupmenu.add(jmiEdit);
    }

    private void deleteRecord() {
        if (row != -1 && questions != null && row < questions.size()) {
            int result = JOptionPane.showConfirmDialog(this, "Are you Sure You Want To Delete This Information ?", "Message From The System", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                String message = "";
                TestQuestionTo tqt = questions.get(row);
                if (tqt != null) {
                    TestQuestionDao action = new TestQuestionDao();
                    if (action.deleteRecord(String.valueOf(tqt.getQuestionID()))) {
                        message = "Selected Question Information Is Deleted";
                        bindtableTestQuestionInfo();
                    } else {
                        message = action.getErrormessage();
                    }
                    JOptionPane.showMessageDialog(this, message);
                }
            }
        }
        row = -1;
    }

    private void editrecord() {
        if(row!=-1&&questions!=null&&row<questions.size()){
        TestQuestionTo tqt=questions.get(row);
        AddTestQuestion atq=new AddTestQuestion(String.valueOf(tqt.getQuestionID()));
        atq.setVisible(true);
        getDesktopPane().add(atq);
        try{
            atq.setSelected(true);
        }catch(PropertyVetoException ex){
            
        }
            dispose();
        }

    }

    public void bindtableTestQuestionInfo() {
        questions = new TestQuestionDao().getAllRecord();
        String[] colnames = {"Question ID", "Question Text", "Option A", "Option B", "Option C", "Option D", "Answer", "Section ID", "Test ID", "Marks"};
        Object[][] records = null;
        if (questions != null && questions.size() > 0) {
            records = new Object[questions.size()][colnames.length];
            int i = 0;
            for (TestQuestionTo tqt : questions) {
                records[i] = new Object[]{tqt.getQuestionID(), tqt.getQuestionText(), tqt.getOptionA(), tqt.getOptionB(), tqt.getOptionC(), tqt.getOptionD(), tqt.getAnswer(), tqt.getSectionID(), tqt.getTestID(), tqt.getMarks()};
                i++;
            }
        } else {
            records = new Object[1][colnames.length];
            records[0] = new Object[]{"No record", "No record", "No record", "No record", "No record", "No record", "No record", "No record", "No record", "No Record"};
        }
        DefaultTableModel dtm = new DefaultTableModel(records, colnames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tablequestion.getTableHeader().setReorderingAllowed(false);
        tablequestion.setAutoCreateRowSorter(true);
        tablequestion.setModel(dtm);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablequestion = new javax.swing.JTable();
        btnrefresh = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ES: VIEW TEST QUESTIONS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Adminui/ex.png"))); // NOI18N

        tablequestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablequestion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablequestionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablequestion);

        btnrefresh.setFont(new java.awt.Font("Jokerman", 1, 36)); // NOI18N
        btnrefresh.setText("REFRESH");
        btnrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(btnrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrefreshActionPerformed
        bindtableTestQuestionInfo();
    }//GEN-LAST:event_btnrefreshActionPerformed

    private void tablequestionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablequestionMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int rowpoint = tablequestion.rowAtPoint(evt.getPoint());
            tablequestion.getSelectionModel().setSelectionInterval(rowpoint, rowpoint);
            popupmenu.show(tablequestion, evt.getX(), evt.getY());
            row = tablequestion.getSelectedRow();
        }
    }//GEN-LAST:event_tablequestionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnrefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablequestion;
    // End of variables declaration//GEN-END:variables
}
